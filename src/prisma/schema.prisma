generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                        String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName                 String
  lastName                  String
  email                     String                      @unique
  password                  String
  status                    UserStatus                  @default(Active)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  userRole                  UserRoles[]
}

model Roles {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String        @unique
  alias      String        @unique
  isActive   Boolean       @default(true)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  Permission Permissions[]
  userRole   UserRoles[]
}

model UserRoles {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @db.Uuid
  roleId String @db.Uuid
  role   Roles  @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model PasswordRequest {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String
  token     String
  exp       DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permissions {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  action    Json
  resources String   @db.VarChar
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleId    String   @db.Uuid
  role      Roles    @relation(fields: [roleId], references: [id])
}

enum UserStatus {
  Active
  Inactive
}